{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tiffanymain4/home/Development/code/phase-2-directory/code-challenges/phase-2-hooks-code-challenge-bank-of-flatiron-TiffanyM0/src/components/TransactionsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Transaction from \"./Transaction\";\n\nfunction TransactionsList({\n  transaction\n}) {\n  _s();\n\n  const [sortOrder, setSortOrder] = useState(\"asc\");\n  const [sortColumn, setSortColumn] = useState(\"\"); // Initially empty to allow toggling\n\n  const [sortedTransactions, setSortedTransactions] = useState([...transaction]);\n  useEffect(() => {\n    // Set initial state when the component mounts\n    setSortedTransactions([...transaction]);\n  }, [transaction]);\n\n  const sortByColumn = columnName => {\n    const sorted = [...sortedTransactions].sort((a, b) => {\n      if (sortOrder === \"asc\") {\n        return a[columnName].localeCompare(b[columnName], undefined, {\n          numeric: true\n        });\n      } else {\n        return b[columnName].localeCompare(a[columnName], undefined, {\n          numeric: true\n        });\n      }\n    });\n    setSortedTransactions(sorted);\n    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n  };\n\n  const handleSortChange = columnName => {\n    if (sortColumn === columnName) {\n      // If the same column is clicked again, toggle the order\n      setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      // If a different column is clicked, update the state\n      setSortColumn(columnName);\n      setSortOrder(\"asc\"); // Reset to ascending order\n    }\n\n    sortByColumn(columnName);\n  };\n\n  const table = sortedTransactions.map(item => {\n    return /*#__PURE__*/_jsxDEV(Transaction, {\n      date: item.date,\n      description: item.description,\n      category: item.category,\n      amount: item.amount\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"sort\",\n      children: \"Sort By:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"sort\",\n      value: sortColumn,\n      onChange: e => handleSortChange(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"description\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"category\",\n        children: \"Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"ui celled striped padded table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSortChange(\"description\"),\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"ui center aligned header\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSortChange(\"category\"),\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"ui center aligned header\",\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), table]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsList, \"aSXs+YHbXH8NhNHZM+5shXfsSzA=\");\n\n_c = TransactionsList;\nexport default TransactionsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsList\");","map":{"version":3,"sources":["/home/tiffanymain4/home/Development/code/phase-2-directory/code-challenges/phase-2-hooks-code-challenge-bank-of-flatiron-TiffanyM0/src/components/TransactionsList.js"],"names":["React","useState","useEffect","Transaction","TransactionsList","transaction","sortOrder","setSortOrder","sortColumn","setSortColumn","sortedTransactions","setSortedTransactions","sortByColumn","columnName","sorted","sort","a","b","localeCompare","undefined","numeric","handleSortChange","table","map","item","date","description","category","amount","id","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Transaction from \"./Transaction\";\n\nfunction TransactionsList({ transaction }) {\n  const [sortOrder, setSortOrder] = useState(\"asc\");\n  const [sortColumn, setSortColumn] = useState(\"\"); // Initially empty to allow toggling\n\n  const [sortedTransactions, setSortedTransactions] = useState([...transaction]);\n\n  useEffect(() => {\n    // Set initial state when the component mounts\n    setSortedTransactions([...transaction]);\n  }, [transaction]);\n\n  const sortByColumn = (columnName) => {\n    const sorted = [...sortedTransactions].sort((a, b) => {\n      if (sortOrder === \"asc\") {\n        return a[columnName].localeCompare(b[columnName], undefined, { numeric: true });\n      } else {\n        return b[columnName].localeCompare(a[columnName], undefined, { numeric: true });\n      }\n    });\n  \n    setSortedTransactions(sorted);\n    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n  };\n \n  \n\n  const handleSortChange = (columnName) => {\n    if (sortColumn === columnName) {\n      // If the same column is clicked again, toggle the order\n      setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      // If a different column is clicked, update the state\n      setSortColumn(columnName);\n      setSortOrder(\"asc\"); // Reset to ascending order\n    }\n\n    sortByColumn(columnName);\n  };\n\n  const table = sortedTransactions.map((item) => {\n    return (\n      <Transaction\n        key={item.id}\n        date={item.date}\n        description={item.description}\n        category={item.category}\n        amount={item.amount}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <label htmlFor=\"sort\">Sort By:</label>\n      <select\n        id=\"sort\"\n        value={sortColumn}\n        onChange={(e) => handleSortChange(e.target.value)}\n      >\n        <option value=\"\">Select</option>\n        <option value=\"description\">Description</option>\n        <option value=\"category\">Category</option>\n      </select>\n\n      <table className=\"ui celled striped padded table\">\n        <tbody>\n          <tr>\n            <th onClick={() => handleSortChange(\"description\")}>\n              <h3 className=\"ui center aligned header\">Description</h3>\n            </th>\n            <th onClick={() => handleSortChange(\"category\")}>\n              <h3 className=\"ui center aligned header\">Category</h3>\n            </th>\n          </tr>\n          {table}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default TransactionsList;\n"]},"metadata":{},"sourceType":"module"}